const assert = require('assert');
const ganache = require('ganache-cli'); //local test network
const Web3 = require('web3');


const provider = ganache.provider();
const web3 = new Web3(provider);

const { interface, bytecode} = require('../compile');
//bytecode = ABI

let accounts; //define variable
let inbox;

//better way
beforeEach(async () => {
    //Get a list of all accounts, test account generated by ganache
    accounts = await web3.eth.getAccounts();

    //Use one of those accounts to deploy the contract
    inbox = await new web3.eth.Contract(JSON.parse(interface))
      .deploy({ data: bytecode, arguments: ['Hi there!']})
      .send({ from: accounts[0], gas: '1000000'});

inbox.setProvider(provider);
/* //old way
beforeEach(() =>{
  //Get a list of all accounts, test account generated by ganache
web3.eth.getAccounts().then(fetchedAccounts => {
  console.log(fetchedAccounts);
})

//Use one of those accounts to deploy the contract
describe('Inbox',() => {
  it('deploys a contract', () => {});
})*/

});

describe('Inbox',() => {
  it('deploys a contract', () => {
    //console.log(accounts);
    //console.log(inbox);
    assert.ok(inbox.options.address);

  });
  it('has a default message', async () => {
    const message = await inbox.methods.message().call(); //call is readonly
    //message() is the function defined in the contract inbox.sol
    assert.equal(message, 'Hi there!');
  });
  it('can change the message', async () => {
    await inbox.methods.setMessage('bye').send({ from: accounts[0]})
    //send can change data inside a contract, takes time. We also specify who pays for it.
    const message = await inbox.methods.message().call();
    assert.equal(message,'bye');
  });
});

/*
Mocha starts
  beforeEach (deploy a new contract)
  it  (manipulate the contract)
  it  (Make an assertion about the contract)
*/

//test
/*
class Car {
  park() {
    return 'stopped';
  }

  drive() {
    return 'vroom';
  }
}

describe('Car class', () => {//(any string,)
  it('can park', ()=>{
    const car = new Car();
    assert.equal(car.park(),'stopped');
  });
});
*/
